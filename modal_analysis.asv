clear
% Define variables
num_masses = 3;
total_mass = 2;
tension_force = 8;
string_length = 3;
damping_coeff = 1;
dx = string_length/(num_masses+1);
amplitude_Uf = 1;
omega_Uf = 2*pi();
%list of x points (including the two endpoints)
xlist = linspace(0,string_length,num_masses+2);
Uf_func = @(t_in) amplitude_Uf*cos(omega_Uf*t_in);
dUfdt_func = @(t_in) -omega_Uf*amplitude_Uf*sin(omega_Uf*t_in);
%generate the struct
string_params = struct();
string_params.n = num_masses;
string_params.M = total_mass;
string_params.Uf_func = Uf_func;
string_params.dUfdt_func = dUfdt_func;
string_params.Tf = tension_force;
string_params.L = string_length;
string_params.c = damping_coeff;
string_params.dx = dx;

% calculate inertia and stiffness matricies
[M_mat,K_mat] = construct_2nd_order_matrices(string_params);

% calculate eigen values/vactors
% collums in ur_mat are the mode shape, which correspond eigenvalues in
% lambda_mat
[Ur_mat,lambda_mat] = eig(K_mat,M_mat);

% calculate frequencies
frequency_mat = lambda_mat.^(1/2)

string_simulation_02(num_masses, total_mass, tension_force,...
    string_length, damping_coeff, dx, amplitude_Uf,omega_Uf)

%% ematrix cals
%build the mass and stiffness matrices that describe the 2nd order system.
%INPUTS
%string_params: a struct containing the system parameters describing the string
% string_params.n: number of masses
% string_params.M: total mass attached to the string
% string_params.Uf_func: function describing motion of end point
% string_params.dUfdt_func: time derivative of Uf
% string_params.Tf: %tension in string
% string_params.L: %length of string
% string_params.c: %damping coefficient
% string_params.dx: %horizontal spacing between masses
%OUTPUTS
%M_mat: the n x n mass (inertia) matrix
%K_mat: the n x n stiffness matrix
function [M_mat,K_mat] = construct_2nd_order_matrices(string_params)
    n = string_params.n;
    I_n = eye(n); % build the nxn identity matrix
    Q = circshift(I_n, [0,1]) - 2*I_n + circshift(I_n, [0,-1]);
    Q(1,end) = Q(1,end)-1; %delete unwanted 1 in top right corner
    Q(end,1) = Q(end,1)-1; %delete unwanted 1 in bottom right corner

    M_mat = string_params.M/n*eye(n);
    K_mat = -string_params.Tf/string_params.dx*Q;
end
%%
%construct the nxn discrete laplacian matrix
% n = 5;
% I_n = eye(n); % build the nxn identity matrix
% my_Laplacian = circshift(I_n, [0,1]) - 2*I_n + circshift(I_n, [0,-1])
% my_Laplacian(1,n) = 0; 
% my_Laplacian(n,1) = 0;
%Use MATLAB to solve the generalized eigenvalue problem
function string_simulation_02(num_masses, total_mass, tension_force,...
    string_length, damping_coeff, dx,amplitude_Uf,omega_Uf)
    %list of x points (including the two endpoints)
    xlist = linspace(0,string_length,num_masses+2);
    Uf_func = @(t_in) amplitude_Uf*cos(omega_Uf*t_in);
    dUfdt_func = @(t_in) -omega_Uf*amplitude_Uf*sin(omega_Uf*t_in);
    %generate the struct
    string_params = struct();
    string_params.n = num_masses;
    string_params.M = total_mass;
    string_params.Uf_func = Uf_func;
    string_params.dUfdt_func = dUfdt_func;
    string_params.Tf = tension_force;
    string_params.L = string_length;
    string_params.c = damping_coeff;
    string_params.dx = dx;
    %initial conditions
    U0 = zeros(num_masses,1);
    dUdt0 = zeros(num_masses,1);
    V0 = [U0;dUdt0];
    tspan = [0,5];
    %run the integration
    ralston_struct.A = [0, 0, 0; 0.5, 0, 0; 0, 0.75, 0];
    ralston_struct.B = [2/9, 1/3, 4/9];
    ralston_struct.C = [0; 0.5; 0.75];
    h_ref = 0.1;
    my_rate_func = @(t,V) string_rate_func01(t,V,string_params);
    
    [tlist,Vlist, ~, ~] = explicit_RK_fixed_step_integration ...
    (my_rate_func,tspan,V0,h_ref,ralston_struct);
    
    figure(1);
    axis manual;
    for t = 1:length(tlist)
%         for mass_num = 1:length(Vlist(1,:))/2
            x_pos = dx.*[1:1:num_masses];
            position_of_masses = Vlist(t,1:num_masses);
            hold on;
            plot(x_pos,position_of_masses,"b.","MarkerSize",20);
            plot(max(x_pos)+dx,Uf_func(tlist(t)),"r.","MarkerSize",20);
            plot(0,0,"r.","MarkerSize",20);
            plot(x_pos,position_of_masses,"b-");
            ylim([-5,5]);
%         end
        pause(0.1);
        clf;
    end
end

