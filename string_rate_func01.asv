%INPUTS
%t: current time
%V: system state. V = [U;dUdt] where
% U and dUdt are n x 1 column vectors
%string_params: a struct containing the system parameters describing the string
% string_params.n: number of masses
% string_params.M: total mass attached to the string
% string_params.Uf_func: function describing motion of end point
% string_params.dUfdt_func: time derivative of Uf
% string_params.Tf: %tension in string
% string_params.L: %length of string
% string_params.c: %damping coefficient
% string_params.dx: %horizontal spacing between masses
function dVdt = string_rate_func01(t,V,string_params)
n = string_params.n; %number of masses
M = string_params.M; %total mass attached to the string
Uf_func = string_params.Uf_func; %function describing motion of end point
dUfdt_func = string_params.dUfdt_func; %time derivative of Uf
Tf = string_params.Tf; %tension in string
L = string_params.L; %length of string
c = string_params.c; %damping coefficient
dx = string_params.dx; %horizontal spacing between masses
%unpack state variable
U = V(1:n);
dUdt = V((n+1):(2*n));
Uf = Uf_func(t);
dUfdt = dUfdt_func(t);
%compute acceleration
d2Udt2 = zeros(1,n);
for i = 1:n
    if i == 1
        d2Udt2(i) = n/M*Tf/dx*(0-2*U(i)+U(i+1))+c/dx*(0-2*dUdt(i)+dUdt(i+1));
    elseif i == n
        d2Udt2(i) = n/M*Tf/dx*(U(i-1)-2*U(i)+Uf)+c/dx*(dUdt(i-1)-2*dUdt(i)+dUfdt);
    else
        d2Udt2(i) = n/M*Tf/dx*(U(i-1)-2*U(i)+U(i+1))+c/dx*(dUdt(i-1)-2*dUdt(i)+dUdt(i+1));
    end
end

d2Udt2 = %your code here (may take several lines)
%assemble state derivative
dVdt = [dUdt;d2Udt2];
end
%% simulation
function string_simulation_template01()
num_masses = %your code here
total_mass = %your code here
tension_force = %your code here
string_length = %your code here
damping_coeff = %your code here
dx = string_length/(num_masses+1);
amplitude_Uf = %your code here
omega_Uf = %your code here
%list of x points (including the two endpoints)
xlist = linspace(0,string_length,num_masses+2);
Uf_func = @(t_in) amplitude_Uf*cos(omega_Uf*t_in);
dUfdt_func = @(t_in) -omega_Uf*amplitude_Uf*sin(omega_Uf*t_in);
%generate the struct
string_params = struct();
string_params.n = num_masses;
string_params.M = total_mass;
string_params.Uf_func = Uf_func;
string_params.dUfdt_func = dUfdt_func;
string_params.Tf = tension_force;
string_params.L = string_length;
string_params.c = damping_coeff;
string_params.dx = dx;
%initial conditions
U0 = %your code here
dUdt0 = %your code here
V0 = [U0;dUdt0];
tspan = %your code here
%run the integration
% [tlist,Vlist] = your_integrator(my_rate_func,tspan,V0,...);
%your code to generate an animation of the system
end

